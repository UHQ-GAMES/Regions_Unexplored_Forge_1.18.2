package net.regions_unexplored.data.worldgen.features;

import com.google.common.collect.ImmutableList;
import net.minecraft.core.Holder;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.*;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator;
import net.minecraft.world.level.levelgen.feature.trunkplacers.*;
import net.regions_unexplored.block.RegionsUnexploredBlocks;
import net.regions_unexplored.data.worldgen.features.feature.bioshroom.GiantBioshroomConfiguration;
import net.regions_unexplored.data.worldgen.features.feature.tree.config.RuTreeConfiguration;
import net.regions_unexplored.world.features.treedecorators.BambooLeaveDecorator;
import net.regions_unexplored.world.features.treedecorators.*;
import net.regions_unexplored.world.level.block.AppleLeavesBlock;
import net.regions_unexplored.world.level.block.AshBlock;
import net.regions_unexplored.world.level.block.BambooLogBlock;

import java.util.List;
import java.util.OptionalInt;


public class RuTreeFeatures {
    //OTHER
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> LUSH_DELTA_AZALEA = FeatureUtils.register("regions_unexplored:lush_delta_azalea", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG), new BendingTrunkPlacer(4, 2, 0, 3, UniformInt.of(1, 2)), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.AZALEA_LEAVES.defaultBlockState(), 3).add(Blocks.FLOWERING_AZALEA_LEAVES.defaultBlockState(), 1)), new RandomSpreadFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), ConstantInt.of(2), 50), new TwoLayersFeatureSize(0, 0, 0)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> FUNGAL_FEN_BROWN_MUSHROOM = FeatureUtils.register("regions_unexplored:fungal_fen_brown_mushroom", Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM), new ForkingTrunkPlacer(7, 3, 2), BlockStateProvider.simple(Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false)), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> FUNGAL_FEN_RED_MUSHROOM = FeatureUtils.register("regions_unexplored:fungal_fen_red_mushroom", Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM), new ForkingTrunkPlacer(3, 3, 2), BlockStateProvider.simple(Blocks.RED_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false)), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BLACKWOOD_MUSHROOMS = FeatureUtils.register("regions_unexplored:blackwood_mushrooms", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).decorators(ImmutableList.of(BlackwoodBioshroom.INSTANCE)).ignoreVines().build());

    //BLUE_BIOSHROOM
    public static final Holder<ConfiguredFeature<GiantBioshroomConfiguration, ?>> GIANT_BLUE_BIOSHROOM = FeatureUtils.register("regions_unexplored:giant_blue_bioshroom", RuFeatureRegistry.GIANT_BLUE_BIOSHROOM, new GiantBioshroomConfiguration(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.BLUE_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.GLOWING_BLUE_BIOSHROOM_BLOCK.get().defaultBlockState()), 7, 7));

    //GREEN_BIOSHROOM
    public static final Holder<ConfiguredFeature<GiantBioshroomConfiguration, ?>> GIANT_GREEN_BIOSHROOM = FeatureUtils.register("regions_unexplored:giant_green_bioshroom", RuFeatureRegistry.GIANT_GREEN_BIOSHROOM, new GiantBioshroomConfiguration(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.GREEN_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.GLOWING_GREEN_BIOSHROOM_BLOCK.get().defaultBlockState()), 8, 5));

    //PINK_BIOSHROOM
    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> GIANT_PINK_BIOSHROOM = FeatureUtils.register("regions_unexplored:giant_pink_bioshroom", RuFeatureRegistry.GIANT_PINK_BIOSHROOM, FeatureConfiguration.NONE);

    //YELLOW_BIOSHROOM
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SMALL_YELLOW_MUSHROOM = FeatureUtils.register("regions_unexplored:small_yellow_mushroom", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(Blocks.MUSHROOM_STEM)).decorators(ImmutableList.of(SmallYellowBioshroomCaps.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> MEDIUM_YELLOW_MUSHROOM = FeatureUtils.register("regions_unexplored:medium_yellow_mushroom", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(4, 3, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(Blocks.MUSHROOM_STEM)).decorators(ImmutableList.of(MediumYellowBioshroomCaps.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_YELLOW_MUSHROOM = FeatureUtils.register("regions_unexplored:big_yellow_mushroom", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(Blocks.MUSHROOM_STEM)).decorators(ImmutableList.of(BigYellowBioshroomCaps.INSTANCE)).ignoreVines().build());

    //ACACIA_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_TREE = FeatureUtils.register("regions_unexplored:acacia_tree", Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(5, 2, 2), BlockStateProvider.simple(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_BLOB_TREE = FeatureUtils.register("regions_unexplored:acacia_blob_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(Blocks.ACACIA_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_SHRUB = FeatureUtils.register("regions_unexplored:acacia_shrub", Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(1, 2, 2), BlockStateProvider.simple(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());

    //BAMBOO_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BAMBOO_TREE = FeatureUtils.register("regions_unexplored:bamboo_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.BAMBOO_LOG.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.BAMBOO_LOG.get().defaultBlockState().setValue(BambooLogBlock.LEAVES, true), 1)),new StraightTrunkPlacer(12, 9, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.BAMBOO_LEAVES.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.BAMBOO_LEAVES.get().defaultBlockState(), 1)),new RandomSpreadFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), ConstantInt.of(5), 150), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(BambooLeaveDecorator.INSTANCE)).ignoreVines().dirt(BlockStateProvider.simple(Blocks.PODZOL)).build());

    //BAOBAB_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BAOBAB_TREE = FeatureUtils.register("regions_unexplored:baobab_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LOG.get().defaultBlockState()),new ForkingTrunkPlacer(5, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LEAVES.get().defaultBlockState()),new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_BAOBAB_TREE = FeatureUtils.register("regions_unexplored:big_baobab_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LOG.get().defaultBlockState()),new DarkOakTrunkPlacer(9, 6, 1),BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LEAVES.get().defaultBlockState()),new AcaciaFoliagePlacer(ConstantInt.of(3), ConstantInt.of(1)),new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty())).ignoreVines().build());

    //BIRCH_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SILVER_BIRCH_ASPEN = FeatureUtils.register("regions_unexplored:silver_birch_aspen", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.BIRCH_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.SILVER_BIRCH_LEAVES.get().defaultBlockState(), 3).add(Blocks.AIR.defaultBlockState(), 1)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(SilverBirchTrunkDecorator.INSTANCE, SilverBirchPlacer.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SILVER_BIRCH = FeatureUtils.register("regions_unexplored:silver_birch", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.BIRCH_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.SILVER_BIRCH_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(SilverBirchTrunkDecorator.INSTANCE, BirchStemDecorator.INSTANCE)).ignoreVines().build());

    //BLACKWOOD_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BLACKWOOD_TREE = FeatureUtils.register("regions_unexplored:blackwood_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(14, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_BLACKWOOD_TREE = FeatureUtils.register("regions_unexplored:big_blackwood_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 5, 3), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(BlackwoodBranchDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_BLACKWOOD_TREE = FeatureUtils.register("regions_unexplored:giant_blackwood_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BLACKWOOD_OAK = FeatureUtils.register("regions_unexplored:blackwood_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 2, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());

    //CHERRY_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> CHERRY_TREE = FeatureUtils.register("regions_unexplored:cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_CHERRY_TREE = FeatureUtils.register("regions_unexplored:big_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> RED_CHERRY_TREE = FeatureUtils.register("regions_unexplored:red_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> RED_BIG_CHERRY_TREE = FeatureUtils.register("regions_unexplored:red_big_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINK_CHERRY_TREE = FeatureUtils.register("regions_unexplored:pink_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.PINK_CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINK_BIG_CHERRY_TREE = FeatureUtils.register("regions_unexplored:pink_big_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.PINK_CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WHITE_CHERRY_TREE = FeatureUtils.register("regions_unexplored:white_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WHITE_BIG_CHERRY_TREE = FeatureUtils.register("regions_unexplored:white_big_cherry_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    //CYPRESS_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> CYPRESS_TREE = FeatureUtils.register("regions_unexplored:cypress_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 5, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> CYPRESS_TREE_MOSS = FeatureUtils.register("regions_unexplored:cypress_tree_moss", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 5, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(SpanishMossDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_CYPRESS_TREE = FeatureUtils.register("regions_unexplored:big_cypress_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(CypressTrunkDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_CYPRESS_TREE_MOSS = FeatureUtils.register("regions_unexplored:big_cypress_tree_moss", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(SpanishMossDecorator.INSTANCE, CypressTrunkDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_CYPRESS_TREE = FeatureUtils.register("regions_unexplored:giant_cypress_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(26, 5, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).ignoreVines().decorators(ImmutableList.of(GiantCypressTrunkDecorator.INSTANCE, GiantCypressLeaveDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_CYPRESS_TREE_MOSS = FeatureUtils.register("regions_unexplored:giant_cypress_tree_moss", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(26, 5, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).ignoreVines().decorators(ImmutableList.of(SpanishMossDecorator.INSTANCE, GiantCypressTrunkDecorator.INSTANCE, GiantCypressLeaveDecorator.INSTANCE)).build());

    //DARK_OAK_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BLACKWOOD_DARK_OAK = FeatureUtils.register("regions_unexplored:blackwood_dark_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.DARK_OAK_LOG.defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(Blocks.DARK_OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    //DEAD_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_BUSH = FeatureUtils.register("regions_unexplored:dead_bush", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(RegionsUnexploredBlocks.ASH.get().defaultBlockState().setValue(AshBlock.HAS_GRAVITY, false))).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_TREE = FeatureUtils.register("regions_unexplored:dead_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(DeadBranchDecorator.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_DEAD_TREE = FeatureUtils.register("regions_unexplored:big_dead_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()),new FancyTrunkPlacer(12, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_PINE_TREE = FeatureUtils.register("regions_unexplored:dead_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_PINE_TREE_TALL = FeatureUtils.register("regions_unexplored:dead_pine_tree_tall", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_SCOTTS_PINE_TREE = FeatureUtils.register("regions_unexplored:dead_scotts_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_SCOTTS_PINE_TREE_TALL = FeatureUtils.register("regions_unexplored:dead_scotts_pine_tree_tall", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_GIANT_PINE_TREE = FeatureUtils.register("regions_unexplored:dead_giant_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_TRUNK = FeatureUtils.register("regions_unexplored:dead_trunk", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState(), 2).add(Blocks.AIR.defaultBlockState(), 3)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(DeadPlacer.INSTANCE, DeadStemDecorator.INSTANCE, DeadBranchDecorator.INSTANCE)).ignoreVines().build());

    //EUCALYPTUS_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> EUCALYPTUS_TREE = FeatureUtils.register("regions_unexplored:eucalyptus_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 1)), new StraightTrunkPlacer(14, 8, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 1)), new RandomSpreadFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), ConstantInt.of(5), 150), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(EucalyptusLeaveDecorator.INSTANCE, EucalyptusTrunkDecorator.INSTANCE,  new LeaveVineDecorator())).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> EUCALYPTUS_TREE_CANOPY = FeatureUtils.register("regions_unexplored:eucalyptus_tree_canopy", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 1)), new StraightTrunkPlacer(14, 8, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 1)), new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(4, 4)), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(EucalyptusTrunkDecorator.INSTANCE, new LeaveVineDecorator())).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> EUCALYPTUS_SHRUB = FeatureUtils.register("regions_unexplored:eucalyptus_shrub", Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState()), new ForkingTrunkPlacer(1, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState()), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());

    //JOSHUA_TREES
    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> LARGE_JOSHUA_TREE = FeatureUtils.register("regions_unexplored:large_joshua_tree", RuFeatureRegistry.LARGE_JOSHUA_TREE, TreeConfiguration.NONE);
    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> MEDIUM_JOSHUA_TREE = FeatureUtils.register("regions_unexplored:medium_joshua_tree", RuFeatureRegistry.MEDIUM_JOSHUA_TREE, TreeConfiguration.NONE);

    //JUNGLE_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> JUNGLE_TREE = FeatureUtils.register("regions_unexplored:jungle_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 3, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator())).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_JUNGLE_TREE = FeatureUtils.register("regions_unexplored:big_jungle_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(new LeaveVineDecorator())).build());

    //LARCH_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SMALL_LARCH_TREE = FeatureUtils.register("regions_unexplored:small_larch_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> LARCH_TREE = FeatureUtils.register("regions_unexplored:larch_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_LARCH_TREE = FeatureUtils.register("regions_unexplored:big_larch_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_LARCH_TREE = FeatureUtils.register("regions_unexplored:giant_larch_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GOLDEN_LARCH_TREE = FeatureUtils.register("regions_unexplored:larch_golden_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_GOLDEN_LARCH_TREE = FeatureUtils.register("regions_unexplored:big_golden_larch_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_GOLDEN_LARCH_TREE = FeatureUtils.register("regions_unexplored:giant_golden_larch_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

    //MAPLE_TREES
    public static final Holder<ConfiguredFeature<RuTreeConfiguration, ?>> MAPLE_TREE = FeatureUtils.register("regions_unexplored:maple_tree", RuFeatureRegistry.MAPLE_TREE, new RuTreeConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAPLE_TREE = FeatureUtils.register("regions_unexplored:big_maple_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<RuTreeConfiguration, ?>> RED_MAPLE_TREE = FeatureUtils.register("regions_unexplored:red_maple_tree", RuFeatureRegistry.MAPLE_TREE, new RuTreeConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_RED_MAPLE_TREE = FeatureUtils.register("regions_unexplored:big_red_maple_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<RuTreeConfiguration, ?>> ORANGE_MAPLE_TREE = FeatureUtils.register("regions_unexplored:orange_maple_tree", RuFeatureRegistry.MAPLE_TREE, new RuTreeConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.ORANGE_MAPLE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_ORANGE_MAPLE_TREE = FeatureUtils.register("regions_unexplored:big_orange_maple_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.ORANGE_MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> RED_MAPLE_BUSH = FeatureUtils.register("regions_unexplored:red_maple_bush", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> RED_MAPLE_SHRUB = FeatureUtils.register("regions_unexplored:red_maple_shrub", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> RED_MAPLE_SHRUB_SHORT = FeatureUtils.register("regions_unexplored:red_maple_shrub_short", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    //MAUVE_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> MAUVE_OAK_BEE = FeatureUtils.register("regions_unexplored:mauve_oak_bee", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(List.of(new BeehiveDecorator(1f))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> MAUVE_OAK = FeatureUtils.register("regions_unexplored:mauve_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAUVE_OAK = FeatureUtils.register("regions_unexplored:big_mauve_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LOG.get().defaultBlockState()), new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    //OAK_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_TREE = FeatureUtils.register("regions_unexplored:oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 2, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_OAK_TREE = FeatureUtils.register("regions_unexplored:big_oak_tree", Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> ALPHA_OAK_TREE = FeatureUtils.register("regions_unexplored:alpha_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.ALPHA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.ALPHA_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> FLOWERING_OAK_TREE = FeatureUtils.register("regions_unexplored:flowering_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 3, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RegionsUnexploredBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_FLOWERING_OAK_TREE = FeatureUtils.register("regions_unexplored:big_flowering_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RegionsUnexploredBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> APPLE_OAK_TREE = FeatureUtils.register("regions_unexplored:apple_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 2, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 18).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(3)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(4)), 2)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_APPLE_OAK_TREE = FeatureUtils.register("regions_unexplored:big_apple_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 14).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(3)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(4)), 2)),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WHITE_OAK = FeatureUtils.register("regions_unexplored:white_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 4, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_CHERRY_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_ASPEN = FeatureUtils.register("regions_unexplored:oak_aspen", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(Blocks.AIR.defaultBlockState(), 1)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(OakPlacer.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_BUSH = FeatureUtils.register("regions_unexplored:oak_bush", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_BUSH_BLOB = FeatureUtils.register("regions_unexplored:oak_bush_blob", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_SHRUB_TERRACOTTA = FeatureUtils.register("regions_unexplored:oak_shrub_terracotta", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().dirt(BlockStateProvider.simple(Blocks.TERRACOTTA)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_SHRUB = FeatureUtils.register("regions_unexplored:oak_shrub", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_SHRUB_SHORT = FeatureUtils.register("regions_unexplored:oak_shrub_short", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_SHRUB_TALL = FeatureUtils.register("regions_unexplored:oak_shrub_tall", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(3, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    //PALM_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PALM_TREE = FeatureUtils.register("regions_unexplored:palm_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 5, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(PalmLeavesPlacer.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> TALL_PALM_TREE = FeatureUtils.register("regions_unexplored:tall_palm_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LOG.get().defaultBlockState()), new StraightTrunkPlacer(12, 5, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(PalmLeavesPlacer.INSTANCE)).ignoreVines().build());

    //PINE_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SMALL_PINE_TREE = FeatureUtils.register("regions_unexplored:small_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SMALL_SCOTTS_PINE_TREE = FeatureUtils.register("regions_unexplored:small_scotts_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINE_TREE = FeatureUtils.register("regions_unexplored:pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINE_TREE_TALL = FeatureUtils.register("regions_unexplored:pine_tree_tall", Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SCOTTS_PINE_TREE = FeatureUtils.register("regions_unexplored:scotts_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SCOTTS_PINE_TREE_TALL = FeatureUtils.register("regions_unexplored:scotts_pine_tree_tall", Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_PINE_TREE = FeatureUtils.register("regions_unexplored:giant_pine_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINE_SHRUB = FeatureUtils.register("regions_unexplored:pine_shrub", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINE_TREE_VINES = FeatureUtils.register("regions_unexplored:pine_tree_vines", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(13, 4, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(8, 8)), new TwoLayersFeatureSize(2, 0, 2)).forceDirt().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE, PineBranchDecorator.INSTANCE, new LeaveVineDecorator())).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> PINE_TREE_MOUNTAIN = FeatureUtils.register("regions_unexplored:pine_tree_mountain", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(13, 4, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(8, 8)), new TwoLayersFeatureSize(2, 0, 2)).forceDirt().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE, PineBranchDecorator.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_PINE_TREE_MOUNTAIN = FeatureUtils.register("regions_unexplored:dead_pine_tree_mountain", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(13, 4, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(8, 8)), new TwoLayersFeatureSize(2, 0, 2)).forceDirt().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE, DeadPineBranchDecorator.INSTANCE)).ignoreVines().build());

    //REDWOOD_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> REDWOOD_TREE = FeatureUtils.register("regions_unexplored:redwood_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 5, 3), BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(RedwoodBranchDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> GIANT_REDWOOD_TREE = FeatureUtils.register("regions_unexplored:giant_redwood_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LOG.get().defaultBlockState()), new GiantTrunkPlacer(24, 2, 10), BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(RedwoodTrunkDecorator.INSTANCE, RedwoodLeaveDecorator.INSTANCE, GiantRedwoodBranchDecorator.INSTANCE)).forceDirt().build());

    //SAGUARO_CACTUS
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SAGUARO_CACTUS = FeatureUtils.register("regions_unexplored:saguaro_cactus", Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.SAGUARO_CACTUS.get().defaultBlockState()),new StraightTrunkPlacer(7, 2, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CACTUS_FLOWER.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(1, 0, 1)).dirt(BlockStateProvider.simple(Blocks.SAND)).decorators(ImmutableList.of(SaguaroCactusLimbs.INSTANCE)).ignoreVines().build());

    //SCULKWOOD_TREES

    //SPRUCE_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE = FeatureUtils.register("regions_unexplored:spruce", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(13, 2, 2), BlockStateProvider.simple(Blocks.SPRUCE_LEAVES.defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_SPRUCE = FeatureUtils.register("regions_unexplored:dead_spruce", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE_SHRUB = FeatureUtils.register("regions_unexplored:spruce_shrub", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(Blocks.SPRUCE_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    //WILLOW_TREES
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WILLOW_TREE = FeatureUtils.register("regions_unexplored:willow_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator(), WillowTrunkDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_WILLOW_TREE = FeatureUtils.register("regions_unexplored:big_willow_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LOG.get().defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WILLOW_ASPEN = FeatureUtils.register("regions_unexplored:willow_aspen", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.WILLOW_LEAVES.get().defaultBlockState(), 3).add(Blocks.AIR.defaultBlockState(), 1)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(WillowPlacer.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WILLOW_SHRUB = FeatureUtils.register("regions_unexplored:willow_shrub", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(WillowPalmPlacer.INSTANCE)).build());


    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DRY_BRUSHLAND_JOSHUA_SHRUB = FeatureUtils.register("regions_unexplored:dry_brushland_joshua_shrub", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.JOSHUA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(3, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DRY_BRUSHLAND_SHRUB_SAND = FeatureUtils.register("regions_unexplored:dry_brushland_shrub_sand", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 1, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DRY_BRUSHLAND_JOSHUA_SHRUB_SAND = FeatureUtils.register("regions_unexplored:dry_brushland_joshua_shrub_sand", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.JOSHUA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 1, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    }
