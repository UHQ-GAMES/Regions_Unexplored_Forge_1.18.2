package net.regions_unexplored.data.worldgen.features;

import java.util.List;

import net.minecraft.core.*;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.*;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.LeavesBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.VerticalAnchor;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.configurations.*;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.placement.*;
import net.regions_unexplored.block.RegionsUnexploredBlocks;
import net.regions_unexplored.data.worldgen.features.feature.bioshroom.GiantBioshroomConfiguration;
import net.regions_unexplored.data.worldgen.features.feature.tree.config.TallSaplingConfiguration;

public class RuVegetationFeatures {
    public static final PlacementModifier WATERSIDE = HeightRangePlacement.uniform(VerticalAnchor.absolute(59), VerticalAnchor.absolute(61));
    public static final PlacementModifier MARSH = HeightRangePlacement.uniform(VerticalAnchor.absolute(59), VerticalAnchor.absolute(59));
    public static final WeightedStateProvider leaveProvider = new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.AZALEA_LEAVES.defaultBlockState().setValue(LeavesBlock.PERSISTENT, true), 4).add(Blocks.FLOWERING_AZALEA_LEAVES.defaultBlockState().setValue(LeavesBlock.PERSISTENT, true), 1));
    public static final WeightedStateProvider mycotoxicWeights = new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.MYCOTOXIC_GRASS.get().defaultBlockState(), 87).add(RegionsUnexploredBlocks.YELLOW_BIOSHROOM.get().defaultBlockState(), 11));
    public static final WeightedStateProvider glisteringWeights = new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.GLISTERING_SPROUT.get().defaultBlockState(), 100).add(RegionsUnexploredBlocks.PINK_BIOSHROOM.get().defaultBlockState(), 1));
    public static final WeightedStateProvider cobaltWeights = new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.COBALT_ROOTS.get().defaultBlockState(), 100).add(RegionsUnexploredBlocks.COBALT_EARLIGHT.get().defaultBlockState(), 1));

    //1.19.4 Features
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>GIANT_BLUE_BIOSHROOM = FeatureUtils.register("regions_unexplored:giant_blue_bioshroom", RuFeatureRegistry.GIANT_BLUE_BIOSHROOM.get(), new GiantBioshroomConfiguration(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.BLUE_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.GLOWING_BLUE_BIOSHROOM_BLOCK.get().defaultBlockState()), 7, 7));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>GIANT_GREEN_BIOSHROOM = FeatureUtils.register("regions_unexplored:giant_green_bioshroom", RuFeatureRegistry.GIANT_GREEN_BIOSHROOM.get(), new GiantBioshroomConfiguration(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.GREEN_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RegionsUnexploredBlocks.GLOWING_GREEN_BIOSHROOM_BLOCK.get().defaultBlockState()), 8, 5));

    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>WATER_CATTAIL = FeatureUtils.register("regions_unexplored:water_cattail", RuFeatureRegistry.WATER_CATTAIL.get(), FeatureConfiguration.NONE);
    //TALL_SAPLINGS
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_ACACIA_SAPLING = FeatureUtils.register("regions_unexplored:tall_acacia_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_ACACIA_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_BAOBAB_SAPLING = FeatureUtils.register("regions_unexplored:tall_baobab_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_BAOBAB_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_BIRCH_SAPLING = FeatureUtils.register("regions_unexplored:tall_birch_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_BIRCH_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_BLACKWOOD_SAPLING = FeatureUtils.register("regions_unexplored:tall_blackwood_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_BLACKWOOD_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_CHERRY_SAPLING = FeatureUtils.register("regions_unexplored:tall_cherry_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_CHERRY_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_RED_CHERRY_SAPLING = FeatureUtils.register("regions_unexplored:tall_red_cherry_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_RED_CHERRY_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_PINK_CHERRY_SAPLING = FeatureUtils.register("regions_unexplored:tall_pink_cherry_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_PINK_CHERRY_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_WHITE_CHERRY_SAPLING = FeatureUtils.register("regions_unexplored:tall_white_cherry_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_WHITE_CHERRY_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_CYPRESS_SAPLING = FeatureUtils.register("regions_unexplored:tall_cypress_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_CYPRESS_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_DARK_OAK_SAPLING = FeatureUtils.register("regions_unexplored:tall_dark_oak_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_DARK_OAK_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_DEAD_SAPLING = FeatureUtils.register("regions_unexplored:tall_dead_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_DEAD_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_DEAD_PINE_SAPLING = FeatureUtils.register("regions_unexplored:tall_dead_pine_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_DEAD_PINE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_EUCALYPTUS_SAPLING = FeatureUtils.register("regions_unexplored:tall_eucalyptus_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_EUCALYPTUS_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_FLOWERING_SAPLING = FeatureUtils.register("regions_unexplored:tall_flowering_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_FLOWERING_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_JOSHUA_SAPLING = FeatureUtils.register("regions_unexplored:tall_joshua_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_JOSHUA_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_JUNGLE_SAPLING = FeatureUtils.register("regions_unexplored:tall_jungle_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_JUNGLE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_LARCH_SAPLING = FeatureUtils.register("regions_unexplored:tall_larch_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_LARCH_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_GOLDEN_LARCH_SAPLING = FeatureUtils.register("regions_unexplored:tall_golden_larch_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_GOLDEN_LARCH_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_MANGROVE_SAPLING = FeatureUtils.register("regions_unexplored:tall_mangrove_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_MANGROVE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_MAPLE_SAPLING = FeatureUtils.register("regions_unexplored:tall_maple_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_MAPLE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_RED_MAPLE_SAPLING = FeatureUtils.register("regions_unexplored:tall_red_maple_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_RED_MAPLE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_ORANGE_MAPLE_SAPLING = FeatureUtils.register("regions_unexplored:tall_orange_maple_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_ORANGE_MAPLE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_MAUVE_SAPLING = FeatureUtils.register("regions_unexplored:tall_mauve_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_MAUVE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_OAK_SAPLING = FeatureUtils.register("regions_unexplored:tall_oak_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_OAK_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_PALM_SAPLING = FeatureUtils.register("regions_unexplored:tall_palm_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_PALM_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_PINE_SAPLING = FeatureUtils.register("regions_unexplored:tall_pine_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_PINE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_REDWOOD_SAPLING = FeatureUtils.register("regions_unexplored:tall_redwood_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_REDWOOD_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_SILVER_BIRCH_SAPLING = FeatureUtils.register("regions_unexplored:tall_silver_birch_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_SILVER_BIRCH_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_SPRUCE_SAPLING = FeatureUtils.register("regions_unexplored:tall_spruce_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_SPRUCE_SAPLING.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_WILLOW_SAPLING = FeatureUtils.register("regions_unexplored:tall_willow_sapling", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_WILLOW_SAPLING.get().defaultBlockState())));
    //mixes
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_AUTUMNAL_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_autumnal_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_MAPLE_SAPLING.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.TALL_SILVER_BIRCH_SAPLING.get().defaultBlockState(), 4).add(RegionsUnexploredBlocks.TALL_RED_MAPLE_SAPLING.get().defaultBlockState(), 4).add(RegionsUnexploredBlocks.TALL_ORANGE_MAPLE_SAPLING.get().defaultBlockState(), 4).add(RegionsUnexploredBlocks.TALL_DEAD_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_BIRCH_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_birch_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_SILVER_BIRCH_SAPLING.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.TALL_BIRCH_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_BLACKWOOD_DARK_OAK_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_blackwood_dark_oak_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_BLACKWOOD_SAPLING.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.TALL_DARK_OAK_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_CHERRY_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_cherry_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_CHERRY_SAPLING.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.TALL_RED_CHERRY_SAPLING.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.TALL_PINK_CHERRY_SAPLING.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.TALL_WHITE_CHERRY_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_DEAD_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_dead_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_DEAD_SAPLING.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.TALL_DEAD_PINE_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_LARCH_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_larch_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_LARCH_SAPLING.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.TALL_GOLDEN_LARCH_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_GOLDEN_LARCH_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_golden_larch_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_LARCH_SAPLING.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.TALL_GOLDEN_LARCH_SAPLING.get().defaultBlockState(), 3))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_MAPLE_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_maple_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_MAPLE_SAPLING.get().defaultBlockState(), 4).add(RegionsUnexploredBlocks.TALL_RED_MAPLE_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_PINE_SPRUCE_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_pine_spruce_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_PINE_SAPLING.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.TALL_SPRUCE_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_PINE_DEAD_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_pine_dead_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_PINE_SAPLING.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.TALL_DEAD_PINE_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_PALM_MANGROVE_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_palm_mangrove_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_PALM_SAPLING.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.TALL_MANGROVE_SAPLING.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>>TALL_WILLOW_CYPRESS_SAPLING_MIX = FeatureUtils.register("regions_unexplored:tall_willow_cypress_sapling_mix", RuFeatureRegistry.TALL_SAPLING.get(), new TallSaplingConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_WILLOW_SAPLING.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.TALL_CYPRESS_SAPLING.get().defaultBlockState(), 1))));

    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>> PATCH_SEAGRASS = FeatureUtils.register("regions_unexplored:patch_seagrass", Feature.SEAGRASS, new ProbabilityFeatureConfiguration(0.6F));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_LILY_PAD = FeatureUtils.register("regions_unexplored:patch_lily_pad", Feature.RANDOM_PATCH, new RandomPatchConfiguration(10, 7, 3, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.LILY_PAD)))));

    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> GIANT_PINK_BIOSHROOM = FeatureUtils.register("regions_unexplored:giant_pink_bioshroom", RuFeatureRegistry.GIANT_PINK_BIOSHROOM.get(), FeatureConfiguration.NONE);

    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BARLEY = FeatureUtils.register("regions_unexplored:patch_barley", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.BARLEY.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MEDIUM_GRASS = FeatureUtils.register("regions_unexplored:patch_medium_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.MEDIUM_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_STEPPE_GRASS = FeatureUtils.register("regions_unexplored:patch_steppe_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.STEPPE_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_STEPPE_SHRUB = FeatureUtils.register("regions_unexplored:patch_steppe_shrub", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.STEPPE_SHRUB.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TALL_STEPPE_GRASS = FeatureUtils.register("regions_unexplored:patch_tall_steppe_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_STEPPE_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DEAD_STEPPE_SHRUB = FeatureUtils.register("regions_unexplored:patch_dead_steppe_shrub", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_STEPPE_SHRUB.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SMALL_DESERT_SHRUB = FeatureUtils.register("regions_unexplored:patch_small_desert_shrub", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SMALL_DESERT_SHRUB.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SEEDED_GRASS = FeatureUtils.register("regions_unexplored:patch_seeded_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SEEDED_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SEEDED_TALL_GRASS = FeatureUtils.register("regions_unexplored:patch_seeded_tall_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SEEDED_TALL_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SANDY_GRASS = FeatureUtils.register("regions_unexplored:patch_sandy_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SANDY_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BARREL_CACTUS = FeatureUtils.register("regions_unexplored:patch_barrel_cactus", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.BARREL_CACTUS.get().defaultBlockState()), 8));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SANDY_TALL_GRASS = FeatureUtils.register("regions_unexplored:patch_sandy_tall_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SANDY_TALL_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FOREST_FERN = FeatureUtils.register("regions_unexplored:patch_forest_ferns", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.FERN.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TALL_FOREST_FERN = FeatureUtils.register("regions_unexplored:patch_tall_forest_ferns", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.LARGE_FERN.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FOREST_FERN_MIX = FeatureUtils.register("regions_unexplored:patch_forest_fern_mix", Feature.FLOWER, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.LARGE_FERN.defaultBlockState(), 1).add(Blocks.FERN.defaultBlockState(), 2)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ELEPHANT_EAR = FeatureUtils.register("regions_unexplored:patch_elephant_ear", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.ELEPHANT_EAR.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SNOWY_GRASS = FeatureUtils.register("regions_unexplored:patch_snowy_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.FROZEN_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_STONE_BUD = FeatureUtils.register("regions_unexplored:patch_stone_bud", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.STONE_BUD.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_REDSTONE_BUD = FeatureUtils.register("regions_unexplored:patch_redstone_bud", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.REDSTONE_BUD.get().defaultBlockState()), 128));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_REDSTONE_BULB = FeatureUtils.register("regions_unexplored:patch_redstone_bulb", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.REDSTONE_BULB.get().defaultBlockState()), 64));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> UNDERGROUND_GRASS = FeatureUtils.register("regions_unexplored:underground_grass", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.GRASS.defaultBlockState(), 50).add(Blocks.TALL_GRASS.defaultBlockState(), 10))));

    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> ALPHA_DANDELION = FeatureUtils.register("regions_unexplored:alpha_dandelion", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.ALPHA_DANDELION.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> ALPHA_ROSE = FeatureUtils.register("regions_unexplored:alpha_rose", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.ALPHA_ROSE.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> RU_FLOWER_DEFAULT = FeatureUtils.register("regions_unexplored:ru_flower_default", Feature.FLOWER, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.FIREWEED.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.DAISY.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.HYSSOP.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.POPPY_BUSH.get().defaultBlockState(), 2).add(Blocks.DANDELION.defaultBlockState(), 2)), 64));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> RU_FLOWER_PINK = FeatureUtils.register("regions_unexplored:ru_pink_flower", Feature.FLOWER, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.FIREWEED.get().defaultBlockState(), 2).add(RegionsUnexploredBlocks.PINK_LUPINE.get().defaultBlockState(), 2).add(Blocks.PINK_TULIP.defaultBlockState(), 2)), 64));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> RU_LILAC = FeatureUtils.register("regions_unexplored:ru_lilac", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.LILAC.defaultBlockState()), 64));

    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_YELLOW_LUPINE_FIELD = FeatureUtils.register("regions_unexplored:patch_yellow_lupine_field", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.YELLOW_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_RED_LUPINE_FIELD = FeatureUtils.register("regions_unexplored:patch_red_lupine_field", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.RED_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLUE_LUPINE_FIELD = FeatureUtils.register("regions_unexplored:patch_blue_lupine_field", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.BLUE_LUPINE.get().defaultBlockState()), 64));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PINK_LUPINE_FIELD = FeatureUtils.register("regions_unexplored:patch_pink_lupine_field", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.PINK_LUPINE.get().defaultBlockState()), 64));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PURPLE_LUPINE_FIELD = FeatureUtils.register("regions_unexplored:patch_purple_lupine_field", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.PURPLE_LUPINE.get().defaultBlockState()), 64));

    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PRISMOSS_SPROUT = FeatureUtils.register("regions_unexplored:patch_prismoss_sprout", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.PRISMOSS_SPROUT.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PRISMARITE = FeatureUtils.register("regions_unexplored:patch_prismarite", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.LARGE_PRISMARITE_CLUSTER.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.PRISMARITE_CLUSTER.get().defaultBlockState(), 5)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_YELLOW_LUPINE = FeatureUtils.register("regions_unexplored:patch_yellow_lupine", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.YELLOW_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_RED_LUPINE = FeatureUtils.register("regions_unexplored:patch_red_lupine", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.RED_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLUE_LUPINE = FeatureUtils.register("regions_unexplored:patch_blue_lupine", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.BLUE_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PINK_LUPINE = FeatureUtils.register("regions_unexplored:patch_pink_lupine", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.PINK_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PURPLE_LUPINE = FeatureUtils.register("regions_unexplored:patch_purple_lupine", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.PURPLE_LUPINE.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_YELLOW_BIOSHROOM = FeatureUtils.register("regions_unexplored:patch_yellow_bioshroom", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.YELLOW_BIOSHROOM.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PINK_BIOSHROOM = FeatureUtils.register("regions_unexplored:patch_pink_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_PINK_BIOSHROOM.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.PINK_BIOSHROOM.get().defaultBlockState(), 10)), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_POPPY_BUSH = FeatureUtils.register("regions_unexplored:patch_poppy_bush", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.POPPY_BUSH.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CAVE_HYSSOP = FeatureUtils.register("regions_unexplored:patch_cave_hyssop", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.CAVE_HYSSOP.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_HYSSOP = FeatureUtils.register("regions_unexplored:patch_hyssop", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.HYSSOP.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WARATAH = FeatureUtils.register("regions_unexplored:patch_waratah", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.WARATAH.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WHITE_TRILLIUM = FeatureUtils.register("regions_unexplored:patch_white_trillium", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_TRILLIUM.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WILTING_TRILLIUM = FeatureUtils.register("regions_unexplored:patch_wilting_trillium", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.WILTING_TRILLIUM.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DORCEL = FeatureUtils.register("regions_unexplored:patch_dorcel", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.DORCEL.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TSUBAKI = FeatureUtils.register("regions_unexplored:patch_tsubaki", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.TSUBAKI.get().defaultBlockState()), 8));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FIREWEED = FeatureUtils.register("regions_unexplored:patch_fireweed", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.FIREWEED.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DAISY = FeatureUtils.register("regions_unexplored:patch_daisy", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.DAISY.get().defaultBlockState()), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FELICIA = FeatureUtils.register("regions_unexplored:patch_felicia", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.FELICIA_DAISY.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TASSEL = FeatureUtils.register("regions_unexplored:patch_tassel", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.TASSEL.get().defaultBlockState()), 8));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TASSEL_DENSE = FeatureUtils.register("regions_unexplored:patch_tassel_dense", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.TASSEL.get().defaultBlockState()), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_POPPY = FeatureUtils.register("regions_unexplored:patch_poppy", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.POPPY.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLUE_ORCHID = FeatureUtils.register("regions_unexplored:patch_blue_orchid", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.BLUE_ORCHID.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ALLIUM = FeatureUtils.register("regions_unexplored:patch_allium", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.ALLIUM.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_RED_TULIP = FeatureUtils.register("regions_unexplored:patch_red_tulip", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.RED_TULIP.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ORANGE_TULIP = FeatureUtils.register("regions_unexplored:patch_orange_tulip", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.ORANGE_TULIP.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PINK_TULIP = FeatureUtils.register("regions_unexplored:patch_pink_tulip", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.PINK_TULIP.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WHITE_TULIP = FeatureUtils.register("regions_unexplored:patch_white_tulip", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.WHITE_TULIP.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_OXEYE = FeatureUtils.register("regions_unexplored:patch_oxeye", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.OXEYE_DAISY.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CORNFLOWER = FeatureUtils.register("regions_unexplored:patch_cornflower", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.CORNFLOWER.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_LILLY = FeatureUtils.register("regions_unexplored:patch_lilly", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.LILY_OF_THE_VALLEY.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SUNFLOWER = FeatureUtils.register("regions_unexplored:patch_sunflower", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.SUNFLOWER.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GREEN_BIOSHROOM = FeatureUtils.register("regions_unexplored:patch_green_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_GREEN_BIOSHROOM.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.GREEN_BIOSHROOM.get().defaultBlockState(), 10)), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLUE_BIOSHROOM = FeatureUtils.register("regions_unexplored:patch_blue_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.TALL_BLUE_BIOSHROOM.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.BLUE_BIOSHROOM.get().defaultBlockState(), 10)), 16));
    //OTHER
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CATTAIL = FeatureUtils.register("regions_unexplored:cattails", Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.CATTAIL.get()))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> DUCKWEED = FeatureUtils.register("regions_unexplored:duckweed", Feature.RANDOM_PATCH, new RandomPatchConfiguration(10, 7, 3, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RegionsUnexploredBlocks.DUCKWEED.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> SEEDED_GRASS_MIX = FeatureUtils.register("regions_unexplored:seeded_grass_mix", Feature.FLOWER, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.SEEDED_TALL_GRASS.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.SEEDED_GRASS.get().defaultBlockState(), 2)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> DAISY_MIX = FeatureUtils.register("regions_unexplored:daisy_mix", Feature.FLOWER, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.DAISY.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.FELICIA_DAISY.get().defaultBlockState(), 1)), 32));


    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MYCOTOXIC_GRASS = FeatureUtils.register("regions_unexplored:patch_mycotoxic_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.MYCOTOXIC_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MYCOTOXIC_DAISY = FeatureUtils.register("regions_unexplored:patch_mycotoxic_daisy", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.MYCOTOXIC_DAISY.get().defaultBlockState()), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TALL_YELLOW_BIOSHROOM = FeatureUtils.register("regions_unexplored:patch_tall_yellow_bioshroom", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.TALL_YELLOW_BIOSHROOM.get().defaultBlockState()), 6));

    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> PATCH_GLISTERING_IVY = FeatureUtils.register("regions_unexplored:patch_glistering_ivy", RuFeatureRegistry.GLISTERING_IVY.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GLISTERING_SPROUT = FeatureUtils.register("regions_unexplored:patch_glistering_sprout", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.GLISTERING_SPROUT.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GLISTER_SPIRE = FeatureUtils.register("regions_unexplored:patch_glister_spire", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.GLISTER_SPIRE.get().defaultBlockState()), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GLISTER_BULB = FeatureUtils.register("regions_unexplored:patch_glister_bulb", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.GLISTER_BULB.get().defaultBlockState()), 6));

    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> PATCH_HANGING_EARLIGHT = FeatureUtils.register("regions_unexplored:patch_hanging_earlight", RuFeatureRegistry.HANGING_EARLIGHT.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_COBALT_EARLIGHT = FeatureUtils.register("regions_unexplored:patch_cobalt_earlight", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.COBALT_EARLIGHT.get().defaultBlockState()), 6));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLACKSTONE_CLUSTER = FeatureUtils.register("regions_unexplored:patch_blackstone_cluster", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKSTONE_CLUSTER.get().defaultBlockState()), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_COBALT_ROOTS = FeatureUtils.register("regions_unexplored:patch_cobalt_roots", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.COBALT_ROOTS.get().defaultBlockState()), 32));

    public static final Holder<ConfiguredFeature<NetherForestVegetationConfig, ?>> MYCOTOXIC_NYLIUM_BONEMEAL = FeatureUtils.register("regions_unexplored:mycotoxic_nylium_bonemeal", Feature.NETHER_FOREST_VEGETATION, new NetherForestVegetationConfig(mycotoxicWeights, 3, 1));
    public static final Holder<ConfiguredFeature<NetherForestVegetationConfig, ?>> GLISTERING_NYLIUM_BONEMEAL = FeatureUtils.register("regions_unexplored:glistering_nylium_bonemeal", Feature.NETHER_FOREST_VEGETATION, new NetherForestVegetationConfig(glisteringWeights, 3, 1));
    public static final Holder<ConfiguredFeature<NetherForestVegetationConfig, ?>> COBALT_NYLIUM_BONEMEAL = FeatureUtils.register("regions_unexplored:cobalt_nylium_bonemeal", Feature.NETHER_FOREST_VEGETATION, new NetherForestVegetationConfig(cobaltWeights, 3, 1));

    public static final Holder<ConfiguredFeature<BlockColumnConfiguration, ?>> OVERGROWN_VINE = FeatureUtils.register("regions_unexplored:overgrown_vine", Feature.BLOCK_COLUMN, new BlockColumnConfiguration(List.of(BlockColumnConfiguration.layer(new WeightedListInt(SimpleWeightedRandomList.<IntProvider>builder().add(UniformInt.of(0, 19), 2).add(UniformInt.of(0, 2), 3).add(UniformInt.of(0, 6), 10).build()), leaveProvider), BlockColumnConfiguration.layer(ConstantInt.of(1), leaveProvider)), Direction.DOWN, BlockPredicate.ONLY_IN_AIR_PREDICATE, true));
    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> NETHER_WILLOW = FeatureUtils.register("regions_unexplored:nether_willow", RuFeatureRegistry.NETHER_WILLOW.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> SCULK_WILLOW = FeatureUtils.register("regions_unexplored:sculk_willow", RuFeatureRegistry.SCULK_WILLOW.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<NoneFeatureConfiguration, ?>> GIANT_SCULK_WILLOW = FeatureUtils.register("regions_unexplored:giant_sculk_willow", RuFeatureRegistry.GIANT_SCULK_WILLOW.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SCULK_SPROUT = FeatureUtils.register("regions_unexplored:patch_sculk_sprout", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SCULK_SPROUT.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SCULK_TENDRIL = FeatureUtils.register("regions_unexplored:patch_sculk_tendril", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RegionsUnexploredBlocks.SCULK_TENDRIL.get().defaultBlockState()), 12));
    
    private static RandomPatchConfiguration grassPatch(BlockStateProvider stateProvider, int i) {
        return FeatureUtils.simpleRandomPatchConfiguration(i, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(stateProvider)));
    }
}
